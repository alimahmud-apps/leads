services:
  nginx:
    container_name: ${CONTAINER_NAME}-nginx
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    restart: unless-stopped
    env_file: .env
    environment:
      HOSTNAME: ${HOSTNAME}
    ports:
      - "8080:80"
      # - "4443:443"
    volumes:
      - ./wordpress:/var/www/html
    networks:
      - internal

  database:
    container_name: ${CONTAINER_NAME}-database
    image: mysql:8.0
    restart: unless-stopped
    env_file: .env
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
      MYSQL_USER: ${DATABASE_USER}
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root", "-p $DATABASE_ROOT_PASSWORD" ]
      timeout: 20s
      retries: 10
    ports:
      - "3306:3306"
    volumes:
      - ./dbdata/mysql/:/var/lib/mysql
    networks:
      - internal

  wordpress:
    depends_on:
      - database
    container_name: ${CONTAINER_NAME}-wordpress
    image: wordpress:php8.2-fpm-alpine
    restart: unless-stopped
    env_file: .env
    environment:
      WORDPRESS_DB_HOST: database:3306 # use the same name as database service
      WORDPRESS_DB_NAME: '${DATABASE_NAME}'
      WORDPRESS_DB_USER: '${DATABASE_USER}'
      WORDPRESS_DB_PASSWORD: '${DATABASE_PASSWORD}'
    volumes:
      - ./wordpress:/var/www/html
    networks:
      - internal

  database-postgres:
    image: postgres:15-alpine
    container_name: ${CONTAINER_NAME}-database-pgsql
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./dbdata/postgres/:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Mount the initialization scri
    ports:
      - "5432:5432"
    networks:
      - internal
  backend:
    build:
      context: ./leads-service
      dockerfile: Dockerfile
    container_name: ${CONTAINER_NAME}-backend
    env_file: .env
    environment:
      DB_HOST_SERVICE: database-postgres # use the same name as database service
      DB_PORT: '5432'
      DB_USER: '${DATABASE_USER}'
      DB_PASSWORD: '${DATABASE_PASSWORD}'
      DB_NAME: '${DATABASE_NAME}'
    depends_on:
      - database-postgres
    restart: unless-stopped
    ports:
      - "8181:8181"
    networks:
      - internal

networks:
  internal:
    driver: bridge
